<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>개인면담 자동 생성기</title>
    <style>
      body {
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
        background-color: #f0f2f5;
        padding: 2rem;
        max-width: 600px;
        margin: auto;
      }
      h1 {
        color: #333;
        font-size: 1.75rem;
        text-align: center;
      }
      label {
        margin-top: 1rem;
        display: block;
        font-weight: bold;
      }
      input,
      textarea,
      button {
        width: 100%;
        padding: 0.75rem;
        margin-top: 0.25rem;
        border: 1px solid #ccc;
        border-radius: 0.5rem;
        font-size: 1rem;
        box-sizing: border-box;
      }
      textarea {
        resize: vertical;
        height: 100px;
      }
      button {
        background-color: #007bff;
        color: white;
        font-weight: bold;
        border: none;
        cursor: pointer;
        margin-top: 1.5rem;
      }
      button:hover {
        background-color: #0056b3;
      }
      #output {
        white-space: pre-wrap;
        background: #ffffff;
        padding: 1.25rem;
        border: 1px solid #ccc;
        margin-top: 1rem;
        border-radius: 0.5rem;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        position: relative;
      }
      #copyBtn {
        width: 100%;
        margin-top: 1rem;
        padding: 0.75rem;
        font-size: 1rem;
        border: none;
        border-radius: 0.5rem;
        background-color: #28a745;
        color: white;
        cursor: pointer;
      }
      #copyBtn:hover {
        background-color: #218838;
      }
      @media screen and (max-width: 600px) {
        body {
          padding: 1rem;
        }
      }
    </style>
  </head>
  <body>
    <h1>📋 개인면담 내용 자동 생성기</h1>

    <label for="date">면담 날짜</label>
    <input type="text" id="date" placeholder="예: 4/28" />

    <label for="weekday">요일</label>
    <input type="text" id="weekday" placeholder="예: 월요일" />

    <label for="rank">계급</label>
    <input type="text" id="rank" placeholder="예: 이병" />

    <label for="name">이름</label>
    <input type="text" id="name" placeholder="예: 홍길동" />

    <label for="experience">경험 키워드 (쉼표로 구분된 단어들)</label>
    <input
      type="text"
      id="experience"
      placeholder="예: 군복무, 자기반성, 동료소통"
    />

    <label for="summary">내용 (경험에 대한 간단한 한 문장 설명)</label>
    <textarea
      id="summary"
      placeholder="예: 친구들과 만나 군복무의 의미에 대해 이야기함"
    ></textarea>

    <button onclick="generateCounseling()">면담 내용 생성하기</button>

    <button id="copyBtn" onclick="copyToClipboard()">복사</button>

    <div id="outputContainer" style="position: relative">
      <div id="output"></div>
    </div>

    <script>
      async function generateCounseling() {
        const date = document.getElementById("date").value.trim();
        const weekday = document.getElementById("weekday").value.trim();
        const rank = document.getElementById("rank").value.trim();
        const name = document.getElementById("name").value.trim();
        const experience = document.getElementById("experience").value.trim();
        const summary = document.getElementById("summary").value.trim();

        if (!date || !weekday || !rank || !name || !experience || !summary) {
          alert("모든 항목을 입력해주세요.");
          return;
        }

        const prompt = `750자 내외의 단일 문단으로 개인면담 본문을 작성해줘. 문체는 -습니다체만 사용하고, '[본문]' 같은 표시 없이 자연스럽게 이어줘. 사용자 경험 키워드는 ${experience}이고, 이에 대한 설명은 '${summary}'야. 이 경험에서 느낀 점, 배운 점, 앞으로의 다짐이 자연스럽게 포함되도록 써줘.`;

        try {
          const response = await fetch(
            "https://api.openai.com/v1/chat/completions",
            {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                Authorization:
                  "Bearer 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",
              },
              body: JSON.stringify({
                model: "gpt-3.5-turbo",
                messages: [{ role: "user", content: prompt }],
                max_tokens: 1000,
                temperature: 0.7,
              }),
            }
          );

          const data = await response.json();
          const aiText =
            data?.choices?.[0]?.message?.content ??
            data?.choices?.[0]?.text ??
            JSON.stringify(data);

          if (!aiText) {
            throw new Error("API 응답 형식이 예상과 다릅니다.");
          }

          const firstLine = `${date}일 ${weekday}, ${rank} ${name} 개인면담 내용입니다.\n\n`;
          document.getElementById("output").innerText = firstLine + aiText;
        } catch (error) {
          console.error("API 응답 오류:", error);
          document.getElementById("output").innerText =
            "면담 내용을 생성하는 데 오류가 발생했습니다.";
        }
      }

      function copyToClipboard() {
        const text = document.getElementById("output").innerText;
        navigator.clipboard.writeText(text).then(() => {
          alert("면담 내용이 클립보드에 복사되었습니다.");
        });
      }
    </script>
  </body>
</html>

